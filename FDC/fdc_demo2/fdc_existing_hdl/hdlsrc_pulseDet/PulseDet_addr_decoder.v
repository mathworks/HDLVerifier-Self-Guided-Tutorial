// Copyright 2025 The MathWorks, Inc.
// -------------------------------------------------------------
// 
// File Name: custom_hdl_prj\hdlsrc\pulse_detector_ipcore\PulseDet_addr_decoder.v
// Created: 2023-08-26 18:01:47
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PulseDet_addr_decoder
// Source Path: PulseDet/PulseDet_axi_lite/PulseDet_addr_decoder
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PulseDet_addr_decoder
          (clk,
           reset,
           data_write,
           addr_sel,
           wr_enb,
           rd_enb,
           read_ip_timestamp,
           data_read,
           write_axi_enable,
           write_packet_size_axi4_stream_master,
           write_threshold,
           write_output_length);


  input   clk;
  input   reset;
  input   [31:0] data_write;  // ufix32
  input   [13:0] addr_sel;  // ufix14
  input   wr_enb;  // ufix1
  input   rd_enb;  // ufix1
  input   [31:0] read_ip_timestamp;  // ufix32
  output  [31:0] data_read;  // ufix32
  output  write_axi_enable;  // ufix1
  output  [31:0] write_packet_size_axi4_stream_master;  // ufix32
  output  signed [17:0] write_threshold;  // sfix18_En11
  output  [31:0] write_output_length;  // ufix32


  wire enb;
  wire decode_sel_output_length_1_1;  // ufix1
  wire decode_sel_threshold_1_1;  // ufix1
  wire decode_sel_ip_timestamp_1_1;  // ufix1
  wire decode_sel_packet_size_axi4_stream_master_1_1;  // ufix1
  wire decode_sel_axi_enable_1_1;  // ufix1
  wire [31:0] const_0;  // ufix32
  wire reg_enb_axi_enable_1_1;  // ufix1
  wire data_in_axi_enable;  // ufix1
  wire const_1;  // ufix1
  reg  data_reg_axi_enable_1_1;  // ufix1
  wire [31:0] data_slice_axi_enable_1;  // ufix32
  wire [31:0] decode_rd_axi_enable_1_1;  // ufix32
  wire reg_enb_packet_size_axi4_stream_master_1_1;  // ufix1
  reg [31:0] data_reg_packet_size_axi4_stream_master_1_1;  // ufix32
  wire [31:0] decode_rd_packet_size_axi4_stream_master_1_1;  // ufix32
  reg [31:0] read_reg_ip_timestamp;  // ufix32
  wire [31:0] decode_rd_ip_timestamp_1_1;  // ufix32
  wire reg_enb_threshold_1_1;  // ufix1
  wire signed [17:0] data_in_threshold;  // sfix18_En11
  reg signed [17:0] data_reg_threshold_1_1;  // sfix18_En11
  wire [31:0] data_slice_threshold_1;  // ufix32
  wire [31:0] decode_rd_threshold_1_1;  // ufix32
  wire reg_enb_output_length_1_1;  // ufix1
  reg [31:0] data_reg_output_length_1_1;  // ufix32
  wire [31:0] decode_rd_output_length_1_1;  // ufix32


  assign decode_sel_output_length_1_1 = addr_sel == 14'b00000001000001;



  assign decode_sel_threshold_1_1 = addr_sel == 14'b00000001000000;



  assign decode_sel_ip_timestamp_1_1 = addr_sel == 14'b00000000000011;



  assign decode_sel_packet_size_axi4_stream_master_1_1 = addr_sel == 14'b00000000000010;



  assign decode_sel_axi_enable_1_1 = addr_sel == 14'b00000000000001;



  assign const_0 = 32'b00000000000000000000000000000000;



  assign reg_enb_axi_enable_1_1 = decode_sel_axi_enable_1_1 & wr_enb;



  assign data_in_axi_enable = data_write[0];



  assign const_1 = 1'b1;



  assign enb = const_1;

  always @(posedge clk)
    begin : reg_axi_enable_1_1_process
      if (reset == 1'b1) begin
        data_reg_axi_enable_1_1 <= 1'b1;
      end
      else begin
        if (enb && reg_enb_axi_enable_1_1) begin
          data_reg_axi_enable_1_1 <= data_in_axi_enable;
        end
      end
    end



  assign data_slice_axi_enable_1 = {31'b0, data_reg_axi_enable_1_1};



  assign decode_rd_axi_enable_1_1 = (decode_sel_axi_enable_1_1 == 1'b0 ? const_0 :
              data_slice_axi_enable_1);



  assign reg_enb_packet_size_axi4_stream_master_1_1 = decode_sel_packet_size_axi4_stream_master_1_1 & wr_enb;



  always @(posedge clk)
    begin : reg_packet_size_axi4_stream_master_1_1_process
      if (reset == 1'b1) begin
        data_reg_packet_size_axi4_stream_master_1_1 <= 32'b00000000000000000000010000000000;
      end
      else begin
        if (enb && reg_enb_packet_size_axi4_stream_master_1_1) begin
          data_reg_packet_size_axi4_stream_master_1_1 <= data_write;
        end
      end
    end



  assign decode_rd_packet_size_axi4_stream_master_1_1 = (decode_sel_packet_size_axi4_stream_master_1_1 == 1'b0 ? decode_rd_axi_enable_1_1 :
              data_reg_packet_size_axi4_stream_master_1_1);



  always @(posedge clk)
    begin : reg_ip_timestamp_process
      if (reset == 1'b1) begin
        read_reg_ip_timestamp <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_ip_timestamp <= read_ip_timestamp;
        end
      end
    end



  assign decode_rd_ip_timestamp_1_1 = (decode_sel_ip_timestamp_1_1 == 1'b0 ? decode_rd_packet_size_axi4_stream_master_1_1 :
              read_reg_ip_timestamp);



  assign reg_enb_threshold_1_1 = decode_sel_threshold_1_1 & wr_enb;



  assign data_in_threshold = $signed(data_write[17:0]);



  always @(posedge clk)
    begin : reg_threshold_1_1_process
      if (reset == 1'b1) begin
        data_reg_threshold_1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb && reg_enb_threshold_1_1) begin
          data_reg_threshold_1_1 <= data_in_threshold;
        end
      end
    end



  assign data_slice_threshold_1 = {{14{data_reg_threshold_1_1[17]}}, data_reg_threshold_1_1};



  assign decode_rd_threshold_1_1 = (decode_sel_threshold_1_1 == 1'b0 ? decode_rd_ip_timestamp_1_1 :
              data_slice_threshold_1);



  assign reg_enb_output_length_1_1 = decode_sel_output_length_1_1 & wr_enb;



  always @(posedge clk)
    begin : reg_output_length_1_1_process
      if (reset == 1'b1) begin
        data_reg_output_length_1_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_output_length_1_1) begin
          data_reg_output_length_1_1 <= data_write;
        end
      end
    end



  assign decode_rd_output_length_1_1 = (decode_sel_output_length_1_1 == 1'b0 ? decode_rd_threshold_1_1 :
              data_reg_output_length_1_1);



  assign data_read = decode_rd_output_length_1_1;

  assign write_axi_enable = data_reg_axi_enable_1_1;

  assign write_packet_size_axi4_stream_master = data_reg_packet_size_axi4_stream_master_1_1;

  assign write_threshold = data_reg_threshold_1_1;

  assign write_output_length = data_reg_output_length_1_1;

endmodule  // PulseDet_addr_decoder

