// Copyright 2025 The MathWorks, Inc.
// -------------------------------------------------------------
// 
// File Name: custom_hdl_prj\hdlsrc\pulse_detector_ipcore\PulseDet_src_tapped_delay_impl.v
// Created: 2023-08-26 18:01:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PulseDet_src_tapped_delay_impl
// Source Path: pulse_detector_ipcore/Pulse Detector IP/Pulse Detector/Local Peak/Tapped Delay Enabled/tapped_delay_impl
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PulseDet_src_tapped_delay_impl
          (clk,
           reset,
           enb,
           u,
           en,
           y_0,
           y_1,
           y_2,
           y_3,
           y_4,
           y_5,
           y_6,
           y_7,
           y_8,
           y_9,
           y_10);


  input   clk;
  input   reset;
  input   enb;
  input   signed [17:0] u;  // sfix18_En11
  input   en;
  output  signed [17:0] y_0;  // sfix18_En11
  output  signed [17:0] y_1;  // sfix18_En11
  output  signed [17:0] y_2;  // sfix18_En11
  output  signed [17:0] y_3;  // sfix18_En11
  output  signed [17:0] y_4;  // sfix18_En11
  output  signed [17:0] y_5;  // sfix18_En11
  output  signed [17:0] y_6;  // sfix18_En11
  output  signed [17:0] y_7;  // sfix18_En11
  output  signed [17:0] y_8;  // sfix18_En11
  output  signed [17:0] y_9;  // sfix18_En11
  output  signed [17:0] y_10;  // sfix18_En11


  wire signed [17:0] Delay_out1 [0:10];  // sfix18_En11 [11]
  wire signed [17:0] Output_Ordering_out1_0;  // sfix18_En11
  wire signed [17:0] Output_Ordering_out1_1;  // sfix18_En11
  wire signed [17:0] Output_Ordering_out1_2;  // sfix18_En11
  wire signed [17:0] Output_Ordering_out1_3;  // sfix18_En11
  wire signed [17:0] Output_Ordering_out1_4;  // sfix18_En11
  wire signed [17:0] Output_Ordering_out1_5;  // sfix18_En11
  wire signed [17:0] Output_Ordering_out1_6;  // sfix18_En11
  wire signed [17:0] Output_Ordering_out1_7;  // sfix18_En11
  wire signed [17:0] Output_Ordering_out1_8;  // sfix18_En11
  wire signed [17:0] Output_Ordering_out1_9;  // sfix18_En11
  wire signed [17:0] Output_Ordering_out1_10;  // sfix18_En11
  wire signed [17:0] Output_Ordering_out1 [0:10];  // sfix18_En11 [11]
  reg signed [17:0] Delay_reg [0:10];  // sfix18 [11]
  wire signed [17:0] Delay_reg_next [0:10];  // sfix18_En11 [11]


  PulseDet_src_Output_Ordering u_Output_Ordering (.d_1(Delay_out1[1]),  // sfix18_En11
                                                  .d_2(Delay_out1[2]),  // sfix18_En11
                                                  .d_3(Delay_out1[3]),  // sfix18_En11
                                                  .d_4(Delay_out1[4]),  // sfix18_En11
                                                  .d_5(Delay_out1[5]),  // sfix18_En11
                                                  .d_6(Delay_out1[6]),  // sfix18_En11
                                                  .d_7(Delay_out1[7]),  // sfix18_En11
                                                  .d_8(Delay_out1[8]),  // sfix18_En11
                                                  .d_9(Delay_out1[9]),  // sfix18_En11
                                                  .d_10(Delay_out1[10]),  // sfix18_En11
                                                  .u(u),  // sfix18_En11
                                                  .y_0(Output_Ordering_out1_0),  // sfix18_En11
                                                  .y_1(Output_Ordering_out1_1),  // sfix18_En11
                                                  .y_2(Output_Ordering_out1_2),  // sfix18_En11
                                                  .y_3(Output_Ordering_out1_3),  // sfix18_En11
                                                  .y_4(Output_Ordering_out1_4),  // sfix18_En11
                                                  .y_5(Output_Ordering_out1_5),  // sfix18_En11
                                                  .y_6(Output_Ordering_out1_6),  // sfix18_En11
                                                  .y_7(Output_Ordering_out1_7),  // sfix18_En11
                                                  .y_8(Output_Ordering_out1_8),  // sfix18_En11
                                                  .y_9(Output_Ordering_out1_9),  // sfix18_En11
                                                  .y_10(Output_Ordering_out1_10)  // sfix18_En11
                                                  );

  assign Output_Ordering_out1[0] = Output_Ordering_out1_0;
  assign Output_Ordering_out1[1] = Output_Ordering_out1_1;
  assign Output_Ordering_out1[2] = Output_Ordering_out1_2;
  assign Output_Ordering_out1[3] = Output_Ordering_out1_3;
  assign Output_Ordering_out1[4] = Output_Ordering_out1_4;
  assign Output_Ordering_out1[5] = Output_Ordering_out1_5;
  assign Output_Ordering_out1[6] = Output_Ordering_out1_6;
  assign Output_Ordering_out1[7] = Output_Ordering_out1_7;
  assign Output_Ordering_out1[8] = Output_Ordering_out1_8;
  assign Output_Ordering_out1[9] = Output_Ordering_out1_9;
  assign Output_Ordering_out1[10] = Output_Ordering_out1_10;

  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg[0] <= 18'sb000000000000000000;
        Delay_reg[1] <= 18'sb000000000000000000;
        Delay_reg[2] <= 18'sb000000000000000000;
        Delay_reg[3] <= 18'sb000000000000000000;
        Delay_reg[4] <= 18'sb000000000000000000;
        Delay_reg[5] <= 18'sb000000000000000000;
        Delay_reg[6] <= 18'sb000000000000000000;
        Delay_reg[7] <= 18'sb000000000000000000;
        Delay_reg[8] <= 18'sb000000000000000000;
        Delay_reg[9] <= 18'sb000000000000000000;
        Delay_reg[10] <= 18'sb000000000000000000;
      end
      else begin
        if (enb && en) begin
          Delay_reg[0] <= Delay_reg_next[0];
          Delay_reg[1] <= Delay_reg_next[1];
          Delay_reg[2] <= Delay_reg_next[2];
          Delay_reg[3] <= Delay_reg_next[3];
          Delay_reg[4] <= Delay_reg_next[4];
          Delay_reg[5] <= Delay_reg_next[5];
          Delay_reg[6] <= Delay_reg_next[6];
          Delay_reg[7] <= Delay_reg_next[7];
          Delay_reg[8] <= Delay_reg_next[8];
          Delay_reg[9] <= Delay_reg_next[9];
          Delay_reg[10] <= Delay_reg_next[10];
        end
      end
    end

  assign Delay_out1[0] = Delay_reg[0];
  assign Delay_out1[1] = Delay_reg[1];
  assign Delay_out1[2] = Delay_reg[2];
  assign Delay_out1[3] = Delay_reg[3];
  assign Delay_out1[4] = Delay_reg[4];
  assign Delay_out1[5] = Delay_reg[5];
  assign Delay_out1[6] = Delay_reg[6];
  assign Delay_out1[7] = Delay_reg[7];
  assign Delay_out1[8] = Delay_reg[8];
  assign Delay_out1[9] = Delay_reg[9];
  assign Delay_out1[10] = Delay_reg[10];
  assign Delay_reg_next[0] = Output_Ordering_out1[0];
  assign Delay_reg_next[1] = Output_Ordering_out1[1];
  assign Delay_reg_next[2] = Output_Ordering_out1[2];
  assign Delay_reg_next[3] = Output_Ordering_out1[3];
  assign Delay_reg_next[4] = Output_Ordering_out1[4];
  assign Delay_reg_next[5] = Output_Ordering_out1[5];
  assign Delay_reg_next[6] = Output_Ordering_out1[6];
  assign Delay_reg_next[7] = Output_Ordering_out1[7];
  assign Delay_reg_next[8] = Output_Ordering_out1[8];
  assign Delay_reg_next[9] = Output_Ordering_out1[9];
  assign Delay_reg_next[10] = Output_Ordering_out1[10];



  assign y_0 = Delay_out1[0];

  assign y_1 = Delay_out1[1];

  assign y_2 = Delay_out1[2];

  assign y_3 = Delay_out1[3];

  assign y_4 = Delay_out1[4];

  assign y_5 = Delay_out1[5];

  assign y_6 = Delay_out1[6];

  assign y_7 = Delay_out1[7];

  assign y_8 = Delay_out1[8];

  assign y_9 = Delay_out1[9];

  assign y_10 = Delay_out1[10];

endmodule  // PulseDet_src_tapped_delay_impl

