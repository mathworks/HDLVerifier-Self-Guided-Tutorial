// Copyright 2025 The MathWorks, Inc.
// -------------------------------------------------------------
// 
// File Name: custom_hdl_prj\hdlsrc\pulse_detector_ipcore\PulseDet_src_From_Input_Stream.v
// Created: 2023-08-26 18:01:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PulseDet_src_From_Input_Stream
// Source Path: pulse_detector_ipcore/Pulse Detector IP/From Input Stream
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PulseDet_src_From_Input_Stream
          (clk,
           reset,
           enb,
           stream_in_data_re,
           stream_in_data_im,
           stream_in_valid,
           data_re,
           data_im,
           valid,
           stream_in_ready);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] stream_in_data_re;  // sfix16_En14
  input   signed [15:0] stream_in_data_im;  // sfix16_En14
  input   stream_in_valid;
  output  signed [15:0] data_re;  // sfix16_En14
  output  signed [15:0] data_im;  // sfix16_En14
  output  valid;
  output  stream_in_ready;


  reg signed [15:0] Delay_out1_re;  // sfix16_En14
  reg signed [15:0] Delay_out1_im;  // sfix16_En14
  reg  Delay1_out1;
  wire Constant_out1;


  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1_re <= 16'sb0000000000000000;
        Delay_out1_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1_re <= stream_in_data_re;
          Delay_out1_im <= stream_in_data_im;
        end
      end
    end



  assign data_re = Delay_out1_re;

  assign data_im = Delay_out1_im;

  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= stream_in_valid;
        end
      end
    end



  assign valid = Delay1_out1;

  assign Constant_out1 = 1'b1;



  assign stream_in_ready = Constant_out1;

endmodule  // PulseDet_src_From_Input_Stream

