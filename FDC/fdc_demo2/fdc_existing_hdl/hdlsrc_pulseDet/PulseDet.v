// Copyright 2025 The MathWorks, Inc.
// -------------------------------------------------------------
// 
// File Name: custom_hdl_prj\hdlsrc\pulse_detector_ipcore\PulseDet.v
// Created: 2023-08-26 18:01:47
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: -1
// Target subsystem base rate: -1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PulseDet
// Source Path: PulseDet
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PulseDet
          (IPCORE_CLK,
           IPCORE_RESETN,
           AXI4_Stream_Master_TREADY,
           AXI4_Stream_Slave_TDATA,
           AXI4_Stream_Slave_TVALID,
           AXI4_Lite_ACLK,
           AXI4_Lite_ARESETN,
           AXI4_Lite_AWADDR,
           AXI4_Lite_AWVALID,
           AXI4_Lite_WDATA,
           AXI4_Lite_WSTRB,
           AXI4_Lite_WVALID,
           AXI4_Lite_BREADY,
           AXI4_Lite_ARADDR,
           AXI4_Lite_ARVALID,
           AXI4_Lite_RREADY,
           AXI4_Stream_Master_TDATA,
           AXI4_Stream_Master_TVALID,
           AXI4_Stream_Master_TLAST,
           AXI4_Stream_Slave_TREADY,
           detected,
           AXI4_Lite_AWREADY,
           AXI4_Lite_WREADY,
           AXI4_Lite_BRESP,
           AXI4_Lite_BVALID,
           AXI4_Lite_ARREADY,
           AXI4_Lite_RDATA,
           AXI4_Lite_RRESP,
           AXI4_Lite_RVALID);


  input   IPCORE_CLK;  // ufix1
  input   IPCORE_RESETN;  // ufix1
  input   AXI4_Stream_Master_TREADY;  // ufix1
  input   [31:0] AXI4_Stream_Slave_TDATA;  // ufix32
  input   AXI4_Stream_Slave_TVALID;  // ufix1
  input   AXI4_Lite_ACLK;  // ufix1
  input   AXI4_Lite_ARESETN;  // ufix1
  input   [15:0] AXI4_Lite_AWADDR;  // ufix16
  input   AXI4_Lite_AWVALID;  // ufix1
  input   [31:0] AXI4_Lite_WDATA;  // ufix32
  input   [3:0] AXI4_Lite_WSTRB;  // ufix4
  input   AXI4_Lite_WVALID;  // ufix1
  input   AXI4_Lite_BREADY;  // ufix1
  input   [15:0] AXI4_Lite_ARADDR;  // ufix16
  input   AXI4_Lite_ARVALID;  // ufix1
  input   AXI4_Lite_RREADY;  // ufix1
  output  [31:0] AXI4_Stream_Master_TDATA;  // ufix32
  output  AXI4_Stream_Master_TVALID;  // ufix1
  output  AXI4_Stream_Master_TLAST;  // ufix1
  output  AXI4_Stream_Slave_TREADY;  // ufix1
  output  detected;  // ufix1
  output  AXI4_Lite_AWREADY;  // ufix1
  output  AXI4_Lite_WREADY;  // ufix1
  output  [1:0] AXI4_Lite_BRESP;  // ufix2
  output  AXI4_Lite_BVALID;  // ufix1
  output  AXI4_Lite_ARREADY;  // ufix1
  output  [31:0] AXI4_Lite_RDATA;  // ufix32
  output  [1:0] AXI4_Lite_RRESP;  // ufix2
  output  AXI4_Lite_RVALID;  // ufix1


  wire reset;
  wire [31:0] ip_timestamp;  // ufix32
  wire reset_cm;  // ufix1
  wire reset_internal;  // ufix1
  wire reset_before_sync;  // ufix1
  wire write_axi_enable;  // ufix1
  wire [31:0] write_packet_size_axi4_stream_master;  // ufix32
  wire signed [17:0] write_threshold;  // sfix18_En11
  wire [31:0] write_output_length;  // ufix32
  wire [15:0] AXI4_Stream_Slave_TDATA_0;  // ufix16
  wire [15:0] AXI4_Stream_Slave_TDATA_1;  // ufix16
  wire const_1;  // ufix1
  wire signed [15:0] stream_out_data_im_sig;  // sfix16_En14
  wire [15:0] top_user_data_1;  // ufix16
  wire [15:0] top_user_data_1_1;  // ufix16
  wire signed [15:0] stream_in_data_im_sig;  // sfix16_En14
  wire stream_in_ready_sig;  // ufix1
  wire [15:0] top_user_data_0;  // ufix16
  wire top_user_valid;  // ufix1
  wire signed [15:0] stream_in_data_re_sig;  // sfix16_En14
  wire top_user_ready;  // ufix1
  wire ce_out_sig;  // ufix1
  wire signed [15:0] stream_out_data_re_sig;  // sfix16_En14
  wire stream_out_valid_sig;  // ufix1
  wire detected_sig;  // ufix1
  wire [15:0] top_user_data_0_1;  // ufix16
  wire [15:0] AXI4_Stream_Master_TDATA_Vec_0;  // ufix16
  wire [15:0] AXI4_Stream_Master_TDATA_Vec_1;  // ufix16


  assign ip_timestamp = 32'b10001001100101010100011110101001;



  assign reset_cm =  ~ IPCORE_RESETN;



  assign reset_before_sync = reset_cm | reset_internal;



  PulseDet_reset_sync u_PulseDet_reset_sync_inst (.clk(IPCORE_CLK),  // ufix1
                                                  .reset_in(reset_before_sync),  // ufix1
                                                  .reset_out(reset)
                                                  );

  PulseDet_axi_lite u_PulseDet_axi_lite_inst (.reset(reset),
                                              .AXI4_Lite_ACLK(AXI4_Lite_ACLK),  // ufix1
                                              .AXI4_Lite_ARESETN(AXI4_Lite_ARESETN),  // ufix1
                                              .AXI4_Lite_AWADDR(AXI4_Lite_AWADDR),  // ufix16
                                              .AXI4_Lite_AWVALID(AXI4_Lite_AWVALID),  // ufix1
                                              .AXI4_Lite_WDATA(AXI4_Lite_WDATA),  // ufix32
                                              .AXI4_Lite_WSTRB(AXI4_Lite_WSTRB),  // ufix4
                                              .AXI4_Lite_WVALID(AXI4_Lite_WVALID),  // ufix1
                                              .AXI4_Lite_BREADY(AXI4_Lite_BREADY),  // ufix1
                                              .AXI4_Lite_ARADDR(AXI4_Lite_ARADDR),  // ufix16
                                              .AXI4_Lite_ARVALID(AXI4_Lite_ARVALID),  // ufix1
                                              .AXI4_Lite_RREADY(AXI4_Lite_RREADY),  // ufix1
                                              .read_ip_timestamp(ip_timestamp),  // ufix32
                                              .AXI4_Lite_AWREADY(AXI4_Lite_AWREADY),  // ufix1
                                              .AXI4_Lite_WREADY(AXI4_Lite_WREADY),  // ufix1
                                              .AXI4_Lite_BRESP(AXI4_Lite_BRESP),  // ufix2
                                              .AXI4_Lite_BVALID(AXI4_Lite_BVALID),  // ufix1
                                              .AXI4_Lite_ARREADY(AXI4_Lite_ARREADY),  // ufix1
                                              .AXI4_Lite_RDATA(AXI4_Lite_RDATA),  // ufix32
                                              .AXI4_Lite_RRESP(AXI4_Lite_RRESP),  // ufix2
                                              .AXI4_Lite_RVALID(AXI4_Lite_RVALID),  // ufix1
                                              .write_axi_enable(write_axi_enable),  // ufix1
                                              .write_packet_size_axi4_stream_master(write_packet_size_axi4_stream_master),  // ufix32
                                              .write_threshold(write_threshold),  // sfix18_En11
                                              .write_output_length(write_output_length),  // ufix32
                                              .reset_internal(reset_internal)  // ufix1
                                              );

  assign AXI4_Stream_Slave_TDATA_0 = AXI4_Stream_Slave_TDATA[15:0];



  assign AXI4_Stream_Slave_TDATA_1 = AXI4_Stream_Slave_TDATA[31:16];



  assign const_1 = 1'b1;



  assign top_user_data_1 = stream_out_data_im_sig;



  assign stream_in_data_im_sig = top_user_data_1_1;



  PulseDet_axi4_stream_slave u_PulseDet_axi4_stream_slave_inst (.clk(IPCORE_CLK),  // ufix1
                                                                .reset(reset),
                                                                .enb(const_1),
                                                                .AXI4_Stream_Slave_TDATA_0(AXI4_Stream_Slave_TDATA_0),  // ufix16
                                                                .AXI4_Stream_Slave_TDATA_1(AXI4_Stream_Slave_TDATA_1),  // ufix16
                                                                .AXI4_Stream_Slave_TVALID(AXI4_Stream_Slave_TVALID),  // ufix1
                                                                .user_ready(stream_in_ready_sig),  // ufix1
                                                                .AXI4_Stream_Slave_TREADY(AXI4_Stream_Slave_TREADY),  // ufix1
                                                                .user_data_0(top_user_data_0),  // ufix16
                                                                .user_data_1(top_user_data_1_1),  // ufix16
                                                                .user_valid(top_user_valid)  // ufix1
                                                                );

  assign stream_in_data_re_sig = top_user_data_0;



  PulseDet_dut u_PulseDet_dut_inst (.clk(IPCORE_CLK),  // ufix1
                                    .reset(reset),
                                    .dut_enable(write_axi_enable),  // ufix1
                                    .stream_in_data_re(stream_in_data_re_sig),  // sfix16_En14
                                    .stream_in_data_im(stream_in_data_im_sig),  // sfix16_En14
                                    .stream_in_valid(top_user_valid),  // ufix1
                                    .threshold(write_threshold),  // sfix18_En11
                                    .output_length(write_output_length),  // ufix32
                                    .stream_out_ready(top_user_ready),  // ufix1
                                    .ce_out(ce_out_sig),  // ufix1
                                    .stream_out_data_re(stream_out_data_re_sig),  // sfix16_En14
                                    .stream_out_data_im(stream_out_data_im_sig),  // sfix16_En14
                                    .stream_out_valid(stream_out_valid_sig),  // ufix1
                                    .stream_in_ready(stream_in_ready_sig),  // ufix1
                                    .detected(detected_sig)  // ufix1
                                    );

  assign top_user_data_0_1 = stream_out_data_re_sig;



  PulseDet_axi4_stream_master u_PulseDet_axi4_stream_master_inst (.clk(IPCORE_CLK),  // ufix1
                                                                  .reset(reset),
                                                                  .enb(const_1),
                                                                  .AXI4_Stream_Master_TREADY(AXI4_Stream_Master_TREADY),  // ufix1
                                                                  .user_data_0(top_user_data_0_1),  // ufix16
                                                                  .user_data_1(top_user_data_1),  // ufix16
                                                                  .user_valid(stream_out_valid_sig),  // ufix1
                                                                  .write_packet_size_axi4_stream_master(write_packet_size_axi4_stream_master),  // ufix32
                                                                  .AXI4_Stream_Master_TDATA_0(AXI4_Stream_Master_TDATA_Vec_0),  // ufix16
                                                                  .AXI4_Stream_Master_TDATA_1(AXI4_Stream_Master_TDATA_Vec_1),  // ufix16
                                                                  .AXI4_Stream_Master_TVALID(AXI4_Stream_Master_TVALID),  // ufix1
                                                                  .AXI4_Stream_Master_TLAST(AXI4_Stream_Master_TLAST),  // ufix1
                                                                  .user_ready(top_user_ready)  // ufix1
                                                                  );

  assign AXI4_Stream_Master_TDATA = {AXI4_Stream_Master_TDATA_Vec_1, AXI4_Stream_Master_TDATA_Vec_0};



  assign detected = detected_sig;

endmodule  // PulseDet

