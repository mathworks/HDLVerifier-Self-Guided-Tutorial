// Copyright 2025 The MathWorks, Inc.
// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Verilog\pulse_detector_v4\Compute_Power.v
// Created: 2024-04-02 19:26:17
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Compute_Power
// Source Path: pulse_detector_v4/Pulse Detector/Compute Power
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Compute_Power
          (clk,
           reset,
           enb,
           data_in_re,
           data_in_im,
           data_out);


  input   clk;
  input   reset;
  input   enb;
  input   signed [39:0] data_in_re;  // sfix40_En37
  input   signed [39:0] data_in_im;  // sfix40_En37
  output  signed [17:0] data_out;  // sfix18_En11


  wire signed [17:0] Data_Type_Conversion1_out1_re;  // sfix18_En15
  wire signed [17:0] Data_Type_Conversion1_out1_im;  // sfix18_En15
  reg signed [17:0] Complex_to_Real_Imag_out1;  // sfix18_En15
  wire signed [35:0] Product_out1;  // sfix36_En30
  reg signed [35:0] Product_out1_1;  // sfix36_En30
  reg signed [17:0] Complex_to_Real_Imag_out2;  // sfix18_En15
  wire signed [35:0] Product1_out1;  // sfix36_En30
  reg signed [35:0] Product1_out1_1;  // sfix36_En30
  wire signed [36:0] Add_add_cast;  // sfix37_En30
  wire signed [36:0] Add_add_cast_1;  // sfix37_En30
  wire signed [36:0] Add_out1;  // sfix37_En30
  wire signed [17:0] Data_Type_Conversion_out1;  // sfix18_En11


  assign Data_Type_Conversion1_out1_re = data_in_re[39:22];
  assign Data_Type_Conversion1_out1_im = data_in_im[39:22];



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        Complex_to_Real_Imag_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Complex_to_Real_Imag_out1 <= Data_Type_Conversion1_out1_re;
        end
      end
    end



  assign Product_out1 = Complex_to_Real_Imag_out1 * Complex_to_Real_Imag_out1;



  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Product_out1_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Product_out1_1 <= Product_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        Complex_to_Real_Imag_out2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Complex_to_Real_Imag_out2 <= Data_Type_Conversion1_out1_im;
        end
      end
    end



  assign Product1_out1 = Complex_to_Real_Imag_out2 * Complex_to_Real_Imag_out2;



  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Product1_out1_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Product1_out1_1 <= Product1_out1;
        end
      end
    end



  assign Add_add_cast = {Product_out1_1[35], Product_out1_1};
  assign Add_add_cast_1 = {Product1_out1_1[35], Product1_out1_1};
  assign Add_out1 = Add_add_cast + Add_add_cast_1;



  assign Data_Type_Conversion_out1 = Add_out1[36:19];



  assign data_out = Data_Type_Conversion_out1;

endmodule  // Compute_Power

