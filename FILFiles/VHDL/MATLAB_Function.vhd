-- Copyright 2025 The MathWorks, Inc.
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\VHDL\pulse_detector_v4\MATLAB_Function.vhd
-- Created: 2024-04-02 19:25:11
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: MATLAB_Function
-- Source Path: pulse_detector_v4/Pulse Detector/Local Peak/MATLAB Function
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Pulse_Detector_pkg.ALL;

ENTITY MATLAB_Function IS
  PORT( threshold                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        DataBuff                          :   IN    vector_of_std_logic_vector18(0 TO 10);  -- sfix18_En11 [11]
        MidSample                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        detected                          :   OUT   std_logic
        );
END MATLAB_Function;


ARCHITECTURE rtl OF MATLAB_Function IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL threshold_signed                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL DataBuff_signed                  : vector_of_signed18(0 TO 10);  -- sfix18_En11 [11]
  SIGNAL MidSample_tmp                    : signed(17 DOWNTO 0);  -- sfix18_En11

BEGIN
  threshold_signed <= signed(threshold);

  outputgen: FOR k1 IN 0 TO 10 GENERATE
    DataBuff_signed(k1) <= signed(DataBuff(k1));
  END GENERATE;

  MATLAB_Function_1_output : PROCESS (DataBuff_signed, threshold_signed)
    VARIABLE y : std_logic;
    VARIABLE extend_temp : signed(18 DOWNTO 0);
    VARIABLE sub_cast : vector_of_signed19(0 TO 10);
    VARIABLE sub_cast_0 : vector_of_signed20(0 TO 10);
    VARIABLE sub_cast_1 : vector_of_signed20(0 TO 10);
    VARIABLE sub_temp : vector_of_signed20(0 TO 10);
    VARIABLE cast : vector_of_signed19(0 TO 10);
  BEGIN
    -- Hardware friendly implementation of peak finder
    --
    -- Function inputs:
    -- * WindowLen - non-tunable parameter defined under Simulink->Edit Data
    -- * threhold  - input port (connected to constant)
    -- * DataBuff  - input port (buffering done using Simulink block)
    --
    -- Function outputs:
    -- * "detected" is set when MidSample is local max
    -- Compare each value in the window to the middle sample via subtraction
    extend_temp := resize(DataBuff_signed(5), 19);
    -- this is a vector
    -- if all values in the result are negative and the middle sample is
    -- greater than a threshold, it is a local max
    y := '1';

    FOR k IN 0 TO 10 LOOP
      sub_cast(k) := resize(DataBuff_signed(k), 19);
      sub_cast_0(k) := resize(sub_cast(k), 20);
      sub_cast_1(k) := resize(extend_temp, 20);
      sub_temp(k) := sub_cast_0(k) - sub_cast_1(k);
      IF (sub_temp(k)(19) = '0') AND (sub_temp(k)(18) /= '0') THEN 
        cast(k) := "0111111111111111111";
      ELSIF (sub_temp(k)(19) = '1') AND (sub_temp(k)(18) /= '1') THEN 
        cast(k) := "1000000000000000000";
      ELSE 
        cast(k) := sub_temp(k)(18 DOWNTO 0);
      END IF;
      y := y AND hdlcoder_to_stdlogic(cast(k) <= to_signed(16#00000#, 19));
    END LOOP;

    detected <= y AND hdlcoder_to_stdlogic(DataBuff_signed(5) > threshold_signed);
    MidSample_tmp <= DataBuff_signed(5);
  END PROCESS MATLAB_Function_1_output;


  MidSample <= std_logic_vector(MidSample_tmp);

END rtl;

